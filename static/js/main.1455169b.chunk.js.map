{"version":3,"sources":["MDEditor.js","App.js","registerServiceWorker.js","index.js"],"names":["renderer","marked","Renderer","linkRenderer","link","href","title","text","call","replace","defaultText","MDEditor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","state","markdown","handleChange","bind","assertThisInitialized","event","setState","target","value","mdCode","__html","breaks","react_default","a","createElement","className","id","htmlFor","name","onChange","dangerouslySetInnerHTML","getMarkdownHTML","Component","App","src_MDEditor_0","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1455169b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport marked from 'marked';\nimport './MDEditor.css';\n\n// modify markedjs's default behaviour\nconst renderer = new marked.Renderer();\nconst linkRenderer = renderer.link;\nrenderer.link = (href, title, text) => {\n    const html = linkRenderer.call(renderer, href, title, text);\n    return html.replace(/^<a /, '<a target=\"_blank\" rel=\"nofollow noopener noreferrer\" ');\n};\n\nconst defaultText = \n`# Header\n## Subheader\nLink example: [FreeCodeCamp](https://freecodecamp.org)\n\nHere's some inline code: \\`const myNumber = 42;\\` and here's a code block:\n\\`\\`\\`\nlet i = 0;\nwhile (i < 10){\n  console.log(i);\n  i++;\n}\n\\`\\`\\`\n\nHere's a list:\n- egg\n- flours\n- tomatoes\n\nquote:\n> Here's a quote\n\nAn image:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n\nText can be in *italics* or **bold** or ***both***\n`;\n\nclass MDEditor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { markdown: defaultText };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({markdown: event.target.value});\n  }\n\n  getMarkdownHTML(mdCode){\n    return {\n      __html: marked(mdCode, { renderer, breaks: true })\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"MDEditor\">\n        <div className=\"row\">\n          <div className=\"form-group col-12 col-lg-6 bg-white d-flex flex-column\" id=\"edit-block\">\n            <div className=\"d-flex justify-content-between align-items-center pb-2\">\n              <label className=\"d-block mb-0\" htmlFor=\"editor\">Edit</label>\n              <a className=\"btn btn-primary d-md-none\" href=\"#preview-block\">Preview</a>\n            </div>\n            <textarea className=\"MDEditor-textarea form-control w-100\" \n              id=\"editor\" name=\"editor\" value={this.state.markdown} onChange={this.handleChange} />\n          </div>\n          <div className=\"form-group col-12 col-lg-6 bg-white d-flex flex-column\" id=\"preview-block\">\n            <div className=\"d-flex justify-content-between align-items-center pb-2\">\n              <label className=\"d-block mb-0\" htmlFor=\"preview\">Preview</label>\n              <a className=\"btn btn-primary d-md-none\" href=\"#edit-block\">Edit</a>\n            </div>\n            <div className=\"MDEditor-preview text-left p-2 w-100 bg-light\" \n              id=\"preview\" dangerouslySetInnerHTML={this.getMarkdownHTML(this.state.markdown)}>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MDEditor;\n","import React, { Component } from 'react';\nimport MDEditor from './MDEditor';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Markdown Previewer</h1>\n        </header>\n        <main className=\"container pt-2\">\n          <MDEditor></MDEditor>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}